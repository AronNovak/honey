<?php
/**
 * @file
 * Actions and events for portscanning visitors
 */

/**
 * Implements hook_exit().
 */
function honey_exit() {
  rules_invoke_event(
    'honey_page_visit',
    ip_address(),
    $_SERVER['HTTP_USER_AGENT'],
    current_path()
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function honey_cron_queue_info() {
  return array(
    'honey_scan' => array(
      'worker callback' => 'honey_portscan_perform',
      'time' => 240,
    ),
  );
}

/**
 * Tests a string against a regexp pattern
 *
 * @see honey_rules_condition_info().
 */
function honey_regexp_match($pattern, $subject) {
  if (@preg_match($pattern, $subject)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Enqueues the IP for scanning
 *
 * @param $params
 *   Array of incoming parameters from rules.
 *
 * @see honey_rules_action_info().
 */
function honey_portscan($params) {
  if (filter_var($params['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {
    $queue = DrupalQueue::get('honey_scan');
    $queue->createItem($params['ip']);
  }
}

/**
 * Performs the portscanning using nmap.
 * The result is stored in drupal_debug.txt
 * inside the Drupal's standard tmp dir.
 */
function honey_portscan_perform($ip) {
  $out = array();
  exec("nmap $ip | grep open | cut -d\/ -f1", $out);
  $result = array(
    'ip' => $ip,
    'ports' => join(', ', $out),
  );
  drupal_debug($result);
}

